
#include "decode.h"

#include <stdint.h>
#include <math.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>



void decode (din_t rx [N],dout_t  data[N])
{
	int iteration= 2;
	 // fix from matlab

	int n = 8;
	int m = 4;
	float var = 0.79;


	int col_inx[Num_edge] = {1,2,2,3,3,4,4,5,5,6,6,7,7,7,8,8} ;
	int row_inx[Num_edge] = {1,1,2,2,3,2,4,1,2,1,4,1,3,4,3,4} ;

	
	float L_ch[n];
	int i ;
	int j ;
	int k ;
	int iter ;
	int z;
	int j1;
//map y to LLR
	for(i=0;i<n ;i++)
		{
		 L_ch [i] = (-2*(rx[i]))/var;

		}

//1 bit quantizer(hard decision)
	int L_q[n];

	for(i=0;i<n ;i++)
		{
		 if(L_ch[i] > 0)
		 {	L_q [i] = 2;}
		 else
		 {L_q [i] = 1; }

		}
//decoding Process
	int CN_LUT[2][2] ={{2,1},
					   {1,2}};
	int VN_LUT[2][2] ={{1,1},
					   {2,2}};
	int max = 17 ;



	int inx_VN[4][5] = {{1,2,8,10,12},
						{3,4,6,max,max},
						{5,9,13,15,max},
						{7,11,14,16,max}};

	int inx_CN[8][3] = {{1,	max, max },
			   {2,	3  , max },
			   {4,	5  , max },
			   {6,	7  , max },
			   {8,	9  , max },
			   {10,	11 , max },
			   {12,	13 , 14  },
			   {15,	16 , max }};

	int Lvn[Num_edge];
	int len =0 ;
	for (i = 0;i<Num_edge ;i++)
		{
			for (j = 0;j<n;j++)
			{
				for (k=0;k<3;k++)
				{
					Lvn[inx_CN[j][k]-1] = L_q[j] ;
				}
			}
		}

	int L_temFL ;
	int L_temBL ;
	int L_updateFL;
	int L_updateBL;
	int  p_temBL ;
	int  p_temFL ;
	int L_updateML ;
	int num_connected_VN;

	int  T_temFL[M] ={0,0,0,0};
	int  T_temBL[M] ={0,0,0,0};
	int  Lcn[Num_edge] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	int L_app[N] ={0,0,0,0,0,0,0,0};
	int Estimated_bit[N]={0,0,0,0,0,0,0,0};



	for (iter = 0;iter < iteration;iter ++)
			{
			for (i = 0; i < m ;i++)
			//check node process
				{		num_connected_VN = 0;

				for (z = 0;z<5;z++)
					{

						if (inx_VN[i][z] < max)
						{
							num_connected_VN = num_connected_VN +1 ;
						}

					}




				for (j = 0;j<num_connected_VN-1;j++)
				{
					if (j==0)
					{




								for (int j1 = 0 ; j1 < num_connected_VN - 2  ;j1++ )
								{
										if(j1 == 0)
												{	L_temFL = Lvn[inx_VN[i][0]-1];
													L_temBL = Lvn[inx_VN[i][num_connected_VN-1]-1];

												}
										else
												{	L_temFL = L_updateFL ;
	                       							L_temBL = L_updateBL ;

												}




										L_updateFL = CN_LUT[L_temFL-1][Lvn[inx_VN[i][j1+1]-1]-1] ;

										L_updateBL = CN_LUT[L_temBL-1][Lvn[inx_VN[i][num_connected_VN - j1-2]-1]-1];




										T_temFL[j1+1] = L_updateFL ;
	                    				T_temBL[j1+1]= L_updateBL ;



	                    				if (j1 == num_connected_VN - 3)
	                    						{
	                    							T_temFL[0]= Lvn[inx_VN[i][0]-1] ;
	                        						T_temBL[0]= Lvn[inx_VN[i][num_connected_VN-1]-1];
	                       							Lcn[inx_VN[i][0]-1] = L_updateBL ;
	                       							Lcn[inx_VN[i][num_connected_VN-1]-1] = L_updateFL ;

												}

								}

						    }

						 if (j > 0)
						  {
						  	// compute merge check node
	               			 p_temFL = T_temFL[j-1];

	               			 p_temBL = T_temBL[num_connected_VN-j-2];

	               			 L_updateML = CN_LUT[p_temFL-1][p_temBL-1];


	              			 Lcn[inx_VN[i][j]-1] = L_updateML;

					     }







				}



		}


	int num_connected_CN ;
	int Lvn_N[Num_edge] ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


	if(iter < iteration-1)
	{
	for (i = 0; i < n ;i++)
			//check node process
				{		num_connected_CN = 0;

				for (z = 0;z<3;z++)
					{

						if (inx_CN[i][z] < max)
						{
							num_connected_CN = num_connected_CN +1 ;
						}

					}


				if (num_connected_CN-1 ==0)

					{	Lvn_N[inx_CN[i][num_connected_CN-1]-1] = L_q[i];	}

				else
				{
					for (j = 0;j<num_connected_CN;j++)
						{
							if (j==0)
								{

									for (j1 = 0 ; j1 < num_connected_CN - 1  ;j1++ )
								{
										if(j1 == 0)
												{	L_temFL = L_q[i];
													L_temBL = Lcn[inx_CN[i][num_connected_CN-1]-1];

												}
										else
												{	L_temFL = L_updateFL ;
	                       							L_temBL = L_updateBL ;

												}




										L_updateFL = VN_LUT[L_temFL-1][Lcn[inx_CN[i][j1]-1]-1] ;

										L_updateBL = VN_LUT[L_temBL-1][Lcn[inx_CN[i][num_connected_CN - j1-2]-1]-1];




										T_temFL[j1+1] = L_updateFL ;
	                    				T_temBL[j1+1]= L_updateBL ;



	                    				if (j1 == num_connected_CN - 2)
	                    						{
	                    							T_temFL[0]= L_q[i] ;
	                        						T_temBL[0]= Lcn[inx_CN[i][num_connected_CN-1]-1];
	                       							Lvn_N[inx_CN[i][num_connected_CN-1]-1] = L_updateFL ;


												}

								}

						    }

						 if (j > 0)
						  {
						  	// compute merge check node
	               			 p_temFL = T_temFL[j-1];



	               			 p_temBL = T_temBL[num_connected_CN-j-1];



	                		 L_updateML = VN_LUT[p_temFL-1][p_temBL-1];



	              			 Lvn_N[inx_CN[i][j-1]-1] = L_updateML;

					     }

				}
				}


		}
	}


	else

	{


		for (i = 0; i < n ;i++)
			//check node process
				{		num_connected_CN= 0;

				for (z = 0;z<3;z++)
					{

						if (inx_CN[i][z] < max)
						{
							num_connected_CN = num_connected_CN +1 ;
						}

					}


				for (j1 = 0;j1<num_connected_CN;j1++)
				{
					 if (j1 == 0)
					 { L_temFL = L_q[i] ; }
					 else
					 {L_temFL = L_updateFL ;}



					L_updateFL = VN_LUT[L_temFL-1][Lcn[inx_CN[i][j1]]-1] ;


				}


	            L_app[i]= L_updateFL;
	            Estimated_bit[i]= L_app[i]< 1.5;

				}


	}

					for(int i=0;i<Num_edge ;i++)
				{

				Lvn[i]=Lvn_N[i]  ;


	 			}







	}


//test
	for(i=0;i<n ;i++)
		{
		 data [i] =  Estimated_bit[i];

		}


}











